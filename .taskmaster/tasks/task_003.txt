# Task ID: 3
# Title: Setup Logging and Exception Handling
# Status: done
# Dependencies: 16
# Priority: high
# Description: Implement comprehensive logging system with structured JSON output and custom exception classes for proper error handling throughout the application
# Details:
Create src/utils/logging.py:
```python
import logging
import json
import sys
from datetime import datetime

class JSONFormatter(logging.Formatter):
    def format(self, record):
        log_obj = {
            'timestamp': datetime.utcnow().isoformat(),
            'level': record.levelname,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'request_id': getattr(record, 'request_id', None)
        }
        if record.exc_info:
            log_obj['exception'] = self.formatException(record.exc_info)
        return json.dumps(log_obj)

def setup_logging(level: str):
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(JSONFormatter())
    logging.basicConfig(handlers=[handler], level=level)
```

Create src/utils/exceptions.py:
```python
class ProxyException(Exception):
    pass

class ConfigurationError(ProxyException):
    pass

class TranslationError(ProxyException):
    pass

class UpstreamError(ProxyException):
    def __init__(self, status_code: int, message: str):
        self.status_code = status_code
        super().__init__(message)
```

# Test Strategy:
Test JSON logging output format is valid and contains all required fields, verify log levels work correctly, test exception inheritance and custom properties, ensure request ID propagation works in logs

# Subtasks:
## 1. Implement JSON Log Formatter [done]
### Dependencies: None
### Description: Create a custom JSON formatter class that structures log messages in JSON format with configurable fields
### Details:
Develop a custom logging formatter that inherits from Python's logging.Formatter class. The formatter should output logs as JSON objects with fields like timestamp, level, message, logger_name, and any extra fields. Include support for exception information serialization and custom field mapping.

## 2. Create Centralized Logging Setup Function [done]
### Dependencies: 3.1
### Description: Build a configuration function that initializes logging with JSON formatter, appropriate handlers, and log levels
### Details:
Create a setup_logging() function that configures the root logger and application-specific loggers. Include file rotation handler, console handler with pretty-printing option for development, and configurable log levels per module. Support environment-based configuration for different deployment scenarios.

## 3. Design Custom Exception Hierarchy [done]
### Dependencies: None
### Description: Implement a structured exception hierarchy with base exceptions and specific error types for different failure scenarios
### Details:
Create a base ApplicationException class with attributes for error codes, user messages, and internal details. Derive specific exceptions like ValidationError, AuthenticationError, DatabaseError, and ExternalServiceError. Each exception should include serialization methods for consistent error logging and API responses.

## 4. Implement Request ID Generation and Propagation [done]
### Dependencies: None
### Description: Create a system for generating unique request IDs and propagating them through the application context
### Details:
Implement request ID generation using UUID or similar mechanism. Create context variables using Python's contextvars to store and propagate request IDs across async operations. Include utilities for injecting request IDs into log records and extracting them from incoming requests.

## 5. Integrate Logging with FastAPI Middleware [done]
### Dependencies: 3.1, 3.2, 3.4
### Description: Develop FastAPI middleware that automatically logs requests, responses, and errors with proper context
### Details:
Create middleware that captures request details (method, path, headers), response status and timing, and any exceptions. Integrate request ID propagation, ensure sensitive data is masked in logs, and implement configurable verbosity levels. Include correlation between request/response logs using request IDs.

## 6. Implement Comprehensive Testing Suite [done]
### Dependencies: 3.1, 3.2, 3.3, 3.4, 3.5
### Description: Create unit and integration tests for all logging components, exception handling, and middleware functionality
### Details:
Write unit tests for JSON formatter output validation, exception serialization, and request ID propagation. Create integration tests for middleware behavior, log file generation, and error handling flows. Include performance tests for logging overhead and test cases for different configuration scenarios.

