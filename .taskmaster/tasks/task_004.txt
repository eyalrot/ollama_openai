# Task ID: 4
# Title: Create Pydantic Models
# Status: pending
# Dependencies: 3
# Priority: high
# Description: Define all Pydantic models for request/response validation, including Ollama and OpenAI format models for proper type safety and validation
# Details:
Implement src/models.py with comprehensive data models:
```python
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any, Union
from datetime import datetime

# Ollama Models
class OllamaOptions(BaseModel):
    temperature: Optional[float] = 0.7
    top_p: Optional[float] = 1.0
    top_k: Optional[int] = None
    num_predict: Optional[int] = None
    stop: Optional[List[str]] = None

class OllamaGenerateRequest(BaseModel):
    model: str
    prompt: str
    stream: bool = False
    options: Optional[OllamaOptions] = None
    context: Optional[List[int]] = None

class OllamaChatMessage(BaseModel):
    role: str
    content: str
    images: Optional[List[str]] = None

class OllamaChatRequest(BaseModel):
    model: str
    messages: List[OllamaChatMessage]
    stream: bool = False
    options: Optional[OllamaOptions] = None
    tools: Optional[List[Dict[str, Any]]] = None
    tool_choice: Optional[Union[str, Dict[str, Any]]] = None

# OpenAI Models
class OpenAIMessage(BaseModel):
    role: str
    content: Union[str, List[Dict[str, Any]]]

class OpenAIChatRequest(BaseModel):
    model: str
    messages: List[OpenAIMessage]
    temperature: Optional[float] = None
    top_p: Optional[float] = None
    max_tokens: Optional[int] = None
    stream: bool = False
    tools: Optional[List[Dict[str, Any]]] = None
    tool_choice: Optional[Union[str, Dict[str, Any]]] = None

# Response Models
class OllamaResponse(BaseModel):
    model: str
    created_at: str
    response: str
    done: bool
    context: Optional[List[int]] = None
    total_duration: Optional[int] = None
    eval_count: Optional[int] = None
```

# Test Strategy:
Create unit tests for model validation, test optional fields with None values, verify type coercion works correctly, test serialization/deserialization, validate that all Ollama API fields are covered

# Subtasks:
## 1. Define Ollama Request Models [pending]
### Dependencies: None
### Description: Create TypeScript interfaces and classes for all Ollama API request payloads
### Details:
Define models for chat completion requests, embedding requests, model management requests (pull, push, create, copy, delete), and generation requests. Include proper type definitions for all parameters like model, prompt, messages, options, format, stream, keep_alive, etc.

## 2. Define Ollama Response Models [pending]
### Dependencies: None
### Description: Create TypeScript interfaces and classes for all Ollama API response structures
### Details:
Define models for chat completion responses, embedding responses, model listing responses, model information responses, and streaming response chunks. Include proper handling of optional fields and response metadata like created_at, done, total_duration, etc.

## 3. Define OpenAI Request Models [pending]
### Dependencies: None
### Description: Create TypeScript interfaces and classes for OpenAI-compatible request formats
### Details:
Define models for OpenAI chat completion requests, including messages array structure, model selection, temperature, max_tokens, stream, and other OpenAI-specific parameters. Ensure compatibility with OpenAI API v1 specification.

## 4. Define OpenAI Response Models [pending]
### Dependencies: None
### Description: Create TypeScript interfaces and classes for OpenAI-compatible response formats
### Details:
Define models for OpenAI chat completion responses, including choices array, usage statistics, finish_reason, and model metadata. Handle both streaming and non-streaming response formats according to OpenAI API specification.

## 5. Implement Streaming Models [pending]
### Dependencies: 4.2, 4.4
### Description: Create specialized models for handling streaming responses from both APIs
### Details:
Define streaming chunk models for both Ollama and OpenAI formats, including proper type unions for different chunk types, delta handling, and stream termination indicators. Implement proper TypeScript discriminated unions for type safety.

## 6. Implement Model Validation Rules [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Create validation logic and decorators for all request and response models
### Details:
Implement validation rules using class-validator or similar library. Define constraints for required fields, string formats, number ranges, enum values, and custom validation for complex fields. Ensure proper error messages for validation failures.

## 7. Create Comprehensive Model Tests [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6
### Description: Write unit tests for all models, validation rules, and edge cases
### Details:
Create test suites for model instantiation, serialization/deserialization, validation rules, optional field handling, and type conversions. Test edge cases like empty responses, malformed data, and streaming chunk assembly. Ensure 100% code coverage for all models.

