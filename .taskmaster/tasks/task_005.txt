# Task ID: 5
# Title: Implement Base Translator Architecture
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Create the base translator class and abstract interface for request/response translation between Ollama and OpenAI formats
# Details:
Create src/translators/base.py:
```python
from abc import ABC, abstractmethod
from typing import TypeVar, Generic, Dict, Any
import logging

OllamaRequest = TypeVar('OllamaRequest')
OpenAIRequest = TypeVar('OpenAIRequest')
OpenAIResponse = TypeVar('OpenAIResponse')
OllamaResponse = TypeVar('OllamaResponse')

class BaseTranslator(ABC, Generic[OllamaRequest, OpenAIRequest, OpenAIResponse, OllamaResponse]):
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        
    @abstractmethod
    def translate_request(self, ollama_request: OllamaRequest) -> OpenAIRequest:
        """Translate Ollama request to OpenAI format"""
        pass
        
    @abstractmethod
    def translate_response(self, openai_response: OpenAIResponse, original_request: OllamaRequest) -> OllamaResponse:
        """Translate OpenAI response back to Ollama format"""
        pass
    
    def map_model_name(self, ollama_model: str, mappings: Dict[str, str]) -> str:
        """Map Ollama model name to OpenAI model name"""
        return mappings.get(ollama_model, ollama_model)
    
    def extract_options(self, options: Dict[str, Any]) -> Dict[str, Any]:
        """Extract and map Ollama options to OpenAI parameters"""
        mapping = {
            'temperature': 'temperature',
            'top_p': 'top_p',
            'top_k': 'top_k',
            'num_predict': 'max_tokens'
        }
        result = {}
        for ollama_key, openai_key in mapping.items():
            if ollama_key in options:
                result[openai_key] = options[ollama_key]
        return result
```

# Test Strategy:
Test abstract base class inheritance, verify model name mapping works with and without mappings, test options extraction preserves correct types, ensure logging is properly initialized

# Subtasks:
## 1. Design Abstract Base Class Structure [pending]
### Dependencies: None
### Description: Create the abstract base translator class with core properties and abstract methods
### Details:
Define BaseTranslator abstract class with properties for model mapping, options handling, and translation methods. Include abstract methods like translate(), getModelName(), and validateOptions()

## 2. Implement Generic Type System [pending]
### Dependencies: 5.1
### Description: Design and implement generic types for input/output schemas and options
### Details:
Create generic interfaces and types for TInput, TOutput, and TOptions. Ensure type safety across the translation pipeline with proper TypeScript generics

## 3. Create Model Name Mapping Logic [pending]
### Dependencies: 5.1, 5.2
### Description: Implement the model name translation system between different providers
### Details:
Build a flexible mapping system that can translate model names (e.g., 'gpt-4' to 'claude-3-opus'). Include configuration options and fallback mechanisms

## 4. Build Options Extraction Method [pending]
### Dependencies: 5.2
### Description: Develop methods to extract and transform provider-specific options
### Details:
Create extractOptions() method that can handle different option formats, validate them against schemas, and transform them to the target format

## 5. Implement Error Handling Patterns [pending]
### Dependencies: 5.1, 5.2
### Description: Design comprehensive error handling for translation failures
### Details:
Create custom error classes for translation errors, validation errors, and mapping errors. Implement try-catch patterns and error recovery mechanisms

## 6. Write Unit Tests for Base Functionality [pending]
### Dependencies: 5.3, 5.4, 5.5
### Description: Create comprehensive unit tests for all base translator features
### Details:
Write tests for abstract class inheritance, generic type handling, model mapping accuracy, options extraction, and error scenarios. Use mocking for abstract methods

