# Task ID: 16
# Title: Create GitHub CI/CD Actions Workflow
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement comprehensive GitHub Actions workflows for automated testing, linting, type checking, and Docker image building for both pull requests and main branch pushes
# Details:
Create .github/workflows/ci.yml for pull request checks:
```yaml
name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run ruff linter
      run: |
        pip install ruff
        ruff check src/ tests/ --format=github
    
    - name: Run black formatter check
      run: |
        pip install black
        black --check src/ tests/
    
    - name: Run mypy type checker
      run: |
        pip install mypy
        mypy src/ --strict --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run pytest with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        OPENAI_API_BASE_URL: ${{ secrets.TEST_OPENAI_API_BASE_URL }}
        OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Start mock OpenAI server
      run: |
        docker run -d --name mock-openai -p 8080:8080 \
          -e MOCK_RESPONSES=true \
          mockserver/mockserver:latest
    
    - name: Run integration tests
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pytest tests/integration/ -v
      env:
        OPENAI_API_BASE_URL: http://localhost:8080
        OPENAI_API_KEY: mock-key
    
    - name: Stop mock server
      if: always()
      run: docker stop mock-openai && docker rm mock-openai

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: ollama-openai-proxy:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -e OPENAI_API_BASE_URL=http://test.com -e OPENAI_API_KEY=test \
          ollama-openai-proxy:test python -c "import src; print('Import successful')"
```

Create .github/workflows/release.yml for main branch deployments:
```yaml
name: Release Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ollama-openai-proxy
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
```

Create .github/dependabot.yml for dependency updates:
```yaml
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 5
    
  - package-ecosystem: "docker"
    directory: "/docker"
    schedule:
      interval: "weekly"
    
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
```

Create requirements-dev.txt for development dependencies:
```
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
pytest-mock>=3.11.0
ruff>=0.1.0
black>=23.0.0
mypy>=1.5.0
types-requests
httpx
```

# Test Strategy:
Verify GitHub Actions workflows by creating a test pull request and ensuring all checks pass (linting, type checking, unit tests, integration tests, Docker build), confirm coverage reports are generated and uploaded to Codecov, test that workflow fails appropriately when tests fail or linting errors exist, verify Docker images are built for multiple platforms on release, check that dependabot creates PRs for outdated dependencies, ensure secrets are properly masked in logs, verify caching reduces build times on subsequent runs
