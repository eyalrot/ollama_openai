name: CI Pipeline

on:
  pull_request:
    branches: [ master, develop ]
  push:
    branches: [ master ]

env:
  DOCKER_BUILDKIT: 1
  CI_IMAGE_NAME: ollama-openai-proxy-ci

jobs:
  build-ci-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Generate image metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CI_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build CI Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.ci
        push: false
        tags: ${{ env.CI_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/ci-image.tar
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: ci-image
        path: /tmp/ci-image.tar
        retention-days: 1

  lint-and-format:
    runs-on: ubuntu-latest
    needs: build-ci-image
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download CI Docker image
      uses: actions/download-artifact@v4
      with:
        name: ci-image
        path: /tmp
    
    - name: Load Docker image
      run: docker load --input /tmp/ci-image.tar
    
    - name: Run ruff linter
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/app \
          -w /app \
          ${{ env.CI_IMAGE_NAME }}:${{ github.sha }} \
          ruff check src/ tests/ --output-format=github
    
    - name: Run black formatter check
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/app \
          -w /app \
          ${{ env.CI_IMAGE_NAME }}:${{ github.sha }} \
          black --check src/ tests/
    
    - name: Run mypy type checker
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/app \
          -w /app \
          ${{ env.CI_IMAGE_NAME }}:${{ github.sha }} \
          mypy src/ --ignore-missing-imports --allow-untyped-defs --allow-incomplete-defs

  test:
    runs-on: ubuntu-latest
    needs: build-ci-image
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download CI Docker image
      uses: actions/download-artifact@v4
      with:
        name: ci-image
        path: /tmp
    
    - name: Load Docker image
      run: docker load --input /tmp/ci-image.tar
    
    - name: Run pytest with coverage
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/app \
          -w /app \
          -e OPENAI_API_BASE_URL=${{ secrets.TEST_OPENAI_API_BASE_URL || 'https://api.test.com' }} \
          -e OPENAI_API_KEY=${{ secrets.TEST_OPENAI_API_KEY || 'test-key' }} \
          --user $(id -u):$(id -g) \
          ${{ env.CI_IMAGE_NAME }}:${{ github.sha }} \
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --ignore=tests/unit/test_main.py
    
    - name: Fix coverage file permissions
      run: |
        sudo chown -R $USER:$USER coverage.xml htmlcov/ || true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-ci-image, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download CI Docker image
      uses: actions/download-artifact@v4
      with:
        name: ci-image
        path: /tmp
    
    - name: Load Docker image
      run: docker load --input /tmp/ci-image.tar
    
    - name: Run integration tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/app \
          -w /app \
          -e OPENAI_API_BASE_URL=https://api.test.com \
          -e OPENAI_API_KEY=test-key \
          ${{ env.CI_IMAGE_NAME }}:${{ github.sha }} \
          pytest tests/unit/ -v -k "test_valid_configuration or test_ollama_chat_request"

  docker-build-prod:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.prod
        push: false
        tags: ollama-openai-proxy:prod
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Test production Docker image
      run: |
        # Test that the image starts correctly
        docker run -d --name test-container \
          -e OPENAI_API_BASE_URL=http://test.com \
          -e OPENAI_API_KEY=test \
          -p 11434:11434 \
          ollama-openai-proxy:prod
        
        # Wait for container to be ready
        sleep 10
        
        # Check if container is still running
        docker ps | grep test-container
        
        # Check logs for any errors
        docker logs test-container
        
        # Try to access health endpoint
        curl -f http://localhost:11434/health || (docker logs test-container && exit 1)
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ollama-openai-proxy:prod
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  validate-docker-compose:
    runs-on: ubuntu-latest
    needs: build-ci-image
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test .env file
      run: |
        cat > .env << EOF
        OPENAI_API_BASE_URL=http://test-server:8000/v1
        OPENAI_API_KEY=test-key
        PROXY_PORT=11434
        LOG_LEVEL=INFO
        MODEL_MAPPING_FILE=config/model_map.json
        EOF
    
    - name: Validate docker-compose files
      run: |
        # Validate main compose file
        docker compose -f docker-compose.yml config
        
        # Validate development compose
        docker compose -f docker/docker-compose.dev.yml config
        
        # Validate production compose
        docker compose -f docker/docker-compose.prod.yml config
    
    - name: Test docker-compose up (dry run)
      run: |
        docker compose -f docker-compose.yml config > /tmp/compose-config.yml
        echo "Docker compose configuration is valid"