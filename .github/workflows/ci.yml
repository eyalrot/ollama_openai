name: CI Pipeline

on:
  pull_request:
    branches: [ master, develop ]
  push:
    branches: [ master ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run ruff linter
      run: |
        ruff check src/ tests/ --output-format=github
    
    - name: Run black formatter check
      run: |
        black --check src/ tests/
    
    - name: Run mypy type checker
      run: |
        mypy src/ --strict --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run pytest with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        OPENAI_API_BASE_URL: ${{ secrets.TEST_OPENAI_API_BASE_URL || 'https://api.test.com' }}
        OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY || 'test-key' }}
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Create integration tests directory
      run: mkdir -p tests/integration
    
    - name: Run unit tests as integration placeholder
      run: |
        pytest tests/unit/ -v -k "test_valid_configuration or test_ollama_chat_request"
      env:
        OPENAI_API_BASE_URL: https://api.test.com
        OPENAI_API_KEY: test-key

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: ollama-openai-proxy:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -e OPENAI_API_BASE_URL=http://test.com -e OPENAI_API_KEY=test \
          ollama-openai-proxy:test python -c "from src.config import get_settings; print('Import successful')"