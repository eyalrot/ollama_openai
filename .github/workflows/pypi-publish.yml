name: PyPI Publishing Pipeline

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.12"

jobs:
  build:
    name: Build Python Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Install project dependencies
      run: |
        pip install -e .
    
    - name: Verify package configuration
      run: |
        python -c "from src._version import __version__; print(f'Package version: {__version__}')"
        python -c "import src.main, src.config, src.models; print(f'Package can be imported successfully')"
    
    - name: Build package
      run: |
        python -m build --sdist --wheel --outdir dist/
    
    - name: Check package contents
      run: |
        ls -la dist/
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 7

  test-install:
    name: Test Package Installation
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import middleware, routers, translators, utils; print('Package imported successfully')"
        python -c "from _version import __version__; print(f'Version: {__version__}')"
    
    - name: Test source distribution installation
      run: |
        pip uninstall -y ollama-openai-proxy
        pip install dist/*.tar.gz
        python -c "import middleware, routers, translators, utils; print('Package imported successfully from source')"

  publish-testpypi:
    name: Publish to TestPyPI
    needs: [build, test-install]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ollama-openai-proxy
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
      continue-on-error: true  # Don't fail if version already exists on TestPyPI

  publish-pypi:
    name: Publish to PyPI
    needs: [build, test-install]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/ollama-openai-proxy
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  update-badges:
    name: Update Package Badges
    needs: [publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update README badges
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Update PyPI badge in README
        sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md || true
        
        # Check if any changes were made
        if git diff --quiet; then
          echo "No badge updates needed"
        else
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "docs: update PyPI version badge to $VERSION" || true
          git push || true
        fi